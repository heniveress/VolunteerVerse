{
    "env": {
      "browser": true,
      "es2022": true,
      "node": true
    },
    "extends": [
      "eslint:recommended",
      "plugin:react/recommended",
      "plugin:@typescript-eslint/recommended",
      "plugin:@typescript-eslint/recommended-requiring-type-checking",
      "plugin:prettier/recommended",
      "airbnb",
      // "plugin:import/errors",
      "plugin:import/typescript",
      "prettier"
    ],
    "overrides": [
      {
        "files": ["./**/*.ts", "./**/*.tsx"],
        "excludedFiles": "./node_modules/**/*.ts"
      }
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": "latest",
      "sourceType": "module",
      "project": "./tsconfig.json"
    },
    "plugins": [
      "react",
      "react-hooks",
      "eslint-plugin-react",
      "eslint-plugin-import",
      "eslint-plugin-jsdoc",
      "eslint-plugin-prefer-arrow",
      "@typescript-eslint"
    ],
    "rules": {
      "no-void": "off",
      "react/jsx-filename-extension": [2, { "extensions": [".js", ".jsx", ".ts", ".tsx"] }],
      "prettier/prettier": ["error", { "endOfLine": "auto" }],
      "@typescript-eslint/unbound-method": [
        "error",
        {
          "ignoreStatic": true
        }
      ],
      "@typescript-eslint/adjacent-overload-signatures": "warn",
      "@typescript-eslint/array-type": [
        "warn",
        {
          "default": "array"
        }
      ],
      "@typescript-eslint/ban-types": [
        "warn",
        {
          "types": {
            "Object": {
              "message": "Avoid using the `Object` type. Did you mean `object`?"
            },
            "Function": {
              "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
            },
            "Boolean": {
              "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
            },
            "Number": {
              "message": "Avoid using the `Number` type. Did you mean `number`?"
            },
            "String": {
              "message": "Avoid using the `String` type. Did you mean `string`?"
            },
            "Symbol": {
              "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
            }
          }
        }
      ],
      "@typescript-eslint/consistent-type-assertions": "warn",
      "@typescript-eslint/naming-convention": [
        "warn",
        {
          "selector": ["variable", "function"],
          "format": ["PascalCase", "camelCase"],
          "leadingUnderscore": "allow"
        }
      ],
      "@typescript-eslint/no-shadow": ["error"],
      "@typescript-eslint/no-empty-function": "warn",
      "@typescript-eslint/no-empty-interface": "warn",
      "@typescript-eslint/no-misused-new": "warn",
      "@typescript-eslint/no-namespace": "warn",
      "@typescript-eslint/no-unsafe-assignment": "warn",
      "@typescript-eslint/no-unsafe-call": "off", //warn
      "@typescript-eslint/no-unsafe-member-access": "off", //warn
      "@typescript-eslint/no-unsafe-return": "warn",
      "@typescript-eslint/no-unused-vars": "warn",
      "@typescript-eslint/no-var-requires": "warn",
      "@typescript-eslint/prefer-for-of": "warn",
      "@typescript-eslint/prefer-function-type": "warn",
      "@typescript-eslint/prefer-namespace-keyword": "warn",
      "@typescript-eslint/prefer-regexp-exec": "warn",
      "@typescript-eslint/triple-slash-reference": [
        "warn",
        {
          "path": "always",
          "types": "prefer-import",
          "lib": "always"
        }
      ],
      "@typescript-eslint/unified-signatures": "warn",
      "constructor-super": "warn",
      "eqeqeq": ["warn", "smart"],
      "guard-for-in": "warn",
      "id-blacklist": [
        "warn",
        "any",
        "Number",
        "number",
        "String",
        "string",
        "Boolean",
        "boolean",
        "Undefined",
        "undefined"
      ],
      "id-match": "warn",
      "import/order": "warn",
      "jsdoc/check-alignment": "warn",
      "jsdoc/check-indentation": "warn",
      "max-classes-per-file": ["warn", 1],
      "no-bitwise": "warn",
      "no-caller": "warn",
      "no-cond-assign": "warn",
      "no-console": "warn",
      "no-alert": "off",
      "no-debugger": "warn",
      "no-empty": "warn",
      "no-eval": "warn",
      "no-new-wrappers": "warn",
      "no-throw-literal": "warn",
      "no-undef-init": "warn",
      "no-unsafe-finally": "warn",
      "no-unused-vars": "off",
      "no-unused-labels": "warn",
      "no-var": "warn",
      "object-shorthand": "warn",
      "one-var": ["warn", "never"],
      "prefer-const": "warn",
      "radix": "warn",
      "react/display-name": "off",
      "react/react-in-jsx-scope": "off",
      "react/jsx-key": "warn",
      "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
      "react-hooks/exhaustive-deps": "warn", // Checks effect dependencies
      "no-nested-ternary":"off",
      "spaced-comment": [
        "warn",
        "always",
        {
          "markers": ["/"]
        }
      ],
      "use-isnan": "warn",
      "import/extensions": [
        "error",
        "ignorePackages",
        {
          "js": "never",
          "jsx": "never",
          "ts": "never",
          "tsx": "never"
        }
      ],
      "object-curly-newline":"off",
      "linebreak-style": 0
    },
    "settings": {
      "react": {
        "version": "detect"
      },
      "import/resolver": {
        "node": {
          "extensions": [".js", ".jsx", ".ts", ".tsx"]
        }
      },
      
      "cache": "false"
    }
}